name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('docs/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r docs/requirements.txt
    
    - name: Run Black
      run: black --check src/
    
    - name: Run isort
      run: isort --check-only src/
    
    - name: Run Flake8
      run: flake8 src/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run MyPy
      run: mypy src/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('docs/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Create test environment
      run: |
        mkdir -p /tmp/rag_test/{config,logs,documents,chroma_db}
        echo "JWT_SECRET=test-secret-key-for-testing-only-32chars" > /tmp/rag_test/config/.env
        echo "BASE_DIR=/tmp/rag_test" >> /tmp/rag_test/config/.env
    
    - name: Run tests
      env:
        RAG_CONFIG_PATH: /tmp/rag_test/config/.env
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r docs/requirements.txt
    
    - name: Run Safety check
      run: safety check --json
      continue-on-error: true
    
    - name: Run Bandit
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt
        pip install build
    
    - name: Validate configuration
      run: |
        python -c "from config.config import RAGConfig; print('Config validation passed')"
    
    - name: Check imports
      run: |
        python -c "import src.security; import src.production_api; print('Import check passed')"
    
    - name: Build package
      run: python -m build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/