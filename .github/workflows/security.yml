name: Security Scanning

on:
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  workflow_dispatch:

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r docs/requirements.txt
    
    - name: Run pip-audit
      run: |
        pip-audit --desc > pip-audit-report.txt
      continue-on-error: true
    
    - name: Run Safety check
      run: |
        safety check --json > safety-report.json
      continue-on-error: true
    
    - name: Upload reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          pip-audit-report.txt
          safety-report.json

  code-scanning:
    name: Code Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit
    
    - name: Run Bandit scan
      run: |
        bandit -r src/ -ll -f json -o bandit-detailed-report.json
      continue-on-error: true
    
    - name: Parse Bandit results
      run: |
        python -c "
        import json
        with open('bandit-detailed-report.json', 'r') as f:
            data = json.load(f)
        print(f\"Total issues: {len(data['results'])}\")
        for issue in data['results']:
            print(f\"- {issue['issue_severity']}: {issue['issue_text']} at {issue['filename']}:{issue['line_number']}\")
        "
      continue-on-error: true

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true

  create-issue:
    name: Create Security Issue
    needs: [dependency-check, code-scanning, secret-scanning]
    runs-on: ubuntu-latest
    if: failure()
    permissions:
      issues: write
    
    steps:
    - name: Create issue for security findings
      uses: actions/github-script@v6
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Scan Results - ${date}`,
            body: `## Security Scan Results
            
            The automated security scan has completed. Please review the workflow run for detailed findings:
            
            - [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ### Scan Types Performed:
            - Dependency vulnerability check (pip-audit, safety)
            - Code security analysis (bandit)
            - Secret scanning (gitleaks)
            
            Please review and address any findings as appropriate.`,
            labels: ['security', 'automated']
          });
          console.log(`Created issue #${issue.data.number}`)