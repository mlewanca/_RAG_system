name: Security Scan

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write

jobs:
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety
          pip install -r docs/requirements.txt
      
      - name: Run pip-audit
        run: |
          pip-audit --desc --format json --output audit-results.json || true
          
      - name: Run Safety check
        run: |
          safety check --json --output safety-results.json || true
          
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            audit-results.json
            safety-results.json
      
      - name: Check for critical vulnerabilities
        run: |
          if [ -f audit-results.json ]; then
            critical_count=$(python -c "import json; data=json.load(open('audit-results.json')); print(sum(1 for v in data.get('vulnerabilities', []) if v.get('fix_versions')))")
            if [ "$critical_count" -gt 0 ]; then
              echo "::warning::Found $critical_count vulnerabilities with available fixes"
              python -c "
import json
with open('audit-results.json') as f:
    data = json.load(f)
for v in data.get('vulnerabilities', []):
    if v.get('fix_versions'):
        print(f\"::warning::{v.get('name', 'Unknown')} - {v.get('description', 'No description')}\")"
            fi
          fi

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Bandit
        run: |
          pip install --upgrade pip
          pip install bandit[toml]
      
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-results.json --severity-level medium || true
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json
      
      - name: Parse Bandit results
        run: |
          if [ -f bandit-results.json ]; then
            high_issues=$(python -c "import json; data=json.load(open('bandit-results.json')); print(len([i for i in data.get('results', []) if i.get('issue_severity') == 'HIGH']))")
            if [ "$high_issues" -gt 0 ]; then
              echo "::warning::Found $high_issues HIGH severity security issues"
              python -c "
import json
with open('bandit-results.json') as f:
    data = json.load(f)
for i in data.get('results', []):
    if i.get('issue_severity') == 'HIGH':
        print(f\"::warning file={i['filename']},line={i['line_number']}::{i['issue_text']}\")"
            fi
          fi

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true
      
      - name: Upload Gitleaks results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: gitleaks-results
          path: results.sarif

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  create-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security, secret-scanning, docker-security]
    if: always() && github.event_name == 'schedule' && (needs.dependency-check.result == 'failure' || needs.code-security.result == 'failure' || needs.secret-scanning.result == 'failure')
    permissions:
      issues: write
    steps:
      - name: Create issue for security findings
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `Security Scan Alert - ${date}`;
            const body = `## Security Scan Results
            
            The scheduled security scan has identified potential issues that need attention.
            
            ### Scan Summary
            - **Dependency Check**: ${{ needs.dependency-check.result }}
            - **Code Security**: ${{ needs.code-security.result }}
            - **Secret Scanning**: ${{ needs.secret-scanning.result }}
            - **Docker Security**: ${{ needs.docker-security.result }}
            
            ### Action Required
            Please review the workflow run for detailed findings: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Priority Guidelines
            - ðŸ”´ **Critical/High**: Address immediately
            - ðŸŸ¡ **Medium**: Plan for next sprint
            - ðŸŸ¢ **Low**: Track for future updates
            
            ### Resources
            - [Security Policy](../../security/SECURITY.md)
            - [Security Check Script](../../scripts/security_check.py)
            - [Secure Requirements](../../docs/requirements_secure.txt)
            
            cc: @mlewanca`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });